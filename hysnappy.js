/**
 * Uncompress a snappy compressed buffer.
 *
 * @param {Uint8Array} input
 * @param {number} outputLength
 * @returns {Uint8Array}
 */
export function snappyUncompress(input, outputLength) {
  return snappyUncompressor()(input, outputLength)
}

/**
 * Load wasm and return uncompressor function.
 *
 * @returns {(input: Uint8Array, outputLength: number) => Uint8Array}
 */
export function snappyUncompressor() {
  // Instantiate wasm module
  const wasm = instantiateWasm()

  return (input, outputLength) => {
    /** @type {any} */
    const { memory, uncompress } = wasm.exports

    // Input data is passed into wasm memory at inputStart
    // Output data is expected to be written to wasm memory at outputStart
    // clang uses some wasm memory, so we need to skip past that
    const inputStart = 68000 // 68 kb
    const outputStart = inputStart + input.byteLength

    // WebAssembly memory
    const totalSize = inputStart + input.byteLength + outputLength
    if (memory.buffer.byteLength < totalSize) {
      // Calculate the number of pages needed, rounding up
      const pageSize = 64 * 1024 // 64KiB per page
      const currentPages = memory.buffer.byteLength / pageSize
      const requiredPages = Math.ceil(totalSize / pageSize)
      const pagesToGrow = requiredPages - currentPages
      memory.grow(pagesToGrow)
    }

    // Copy the compressed data to WASM memory
    const byteArray = new Uint8Array(memory.buffer)
    byteArray.set(input, inputStart)

    // Call wasm uncompress function
    const result = uncompress(inputStart, input.byteLength, outputStart)

    // Check for errors
    if (result === -1) throw new Error('invalid snappy length header')
    if (result === -2) throw new Error('missing eof marker')
    if (result === -3) throw new Error('premature end of input')
    if (result) throw new Error(`failed to uncompress data ${result}`)

    // Get uncompressed data from WASM memory
    return byteArray.slice(outputStart, outputStart + outputLength)
  }
}

/**
 * Instantiate WASM module from a base64 string.
 *
 * @returns {WebAssembly.Instance}
 */
function instantiateWasm() {
  const binaryString = atob(wasm64)
  const byteArray = new Uint8Array(binaryString.length)
  for (let i = 0; i < binaryString.length; i += 1) {
    byteArray[i] = binaryString.charCodeAt(i)
  }
  // only works for payload less than 4kb:
  const mod = new WebAssembly.Module(byteArray)
  return new WebAssembly.Instance(mod)
}

// Base64 encoded hysnappy.wasm
const wasm64 = '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'
